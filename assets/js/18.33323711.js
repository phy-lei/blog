(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{595:function(t,s,a){"use strict";a.r(s);var n=a(6),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"介绍"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#介绍"}},[t._v("#")]),t._v(" 介绍")]),t._v(" "),a("p",[t._v("之前使用过的 cicd 是用 travis，这个项目也是用他做的自动部署，而 gitlab 他也有提供 cicd 的，为了实现推送代码，自动打包，然后推送到远程服务器这么个场景，我尝试着使用 gitlab-cicd。刚开始的时候，我尝试着在本地利用脚本 ssh 连接远程服务器，但是由于自己本地是 windows 环境，经过一番试验后，失败了，失败的原因是因为传输文件的时候，需要打密码，所以放弃了，现在想想，或许可以直接配置密钥免密登录，这套方案或许也能成功。")]),t._v(" "),a("h3",{attrs:{id:"gitlab-runner"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#gitlab-runner"}},[t._v("#")]),t._v(" gitlab-runner")]),t._v(" "),a("p",[t._v("关于 gitlab 自动部署的知识，gitlab-runner 是一个很重要的角色，首先我们需要安装他，他是一个 cicd 的执行者，他也可以跟 gitlab 部署到不同的服务器，因为在注册的时候，需要用到 token 去注册，所以说，他拉项目代码的时候，就利用这个 token 去拉取的，这有点类似于 travis。下面我们看看怎么安装他，只需要几条命令，我这里选择使用 docker 安装 gitlab-runner。")]),t._v(" "),a("h4",{attrs:{id:"_1-拉取-runner-镜像并启动"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-拉取-runner-镜像并启动"}},[t._v("#")]),t._v(" 1.拉取 Runner 镜像并启动")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",[t._v("docker run -d --name gitlab-runner --restart always -v /srv/gitlab-runner/config:/etc/gitlab-runner -v /var/run/docker.sock:/var/run/docker.sock gitlab/gitlab-runner:latest")])]),t._v(" "),a("h4",{attrs:{id:"_2-进入-runner-容器内"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-进入-runner-容器内"}},[t._v("#")]),t._v(" 2.进入 Runner 容器内")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",[t._v("docker exec -it gitlab-runner bash")])]),t._v(" "),a("h4",{attrs:{id:"_3-注册-runner"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-注册-runner"}},[t._v("#")]),t._v(" 3.注册 Runner")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",[t._v("gitlab-runner register")])]),t._v(" "),a("p",[t._v("注册 runner 时，后面会弹出很多注册相关的项进行填写，最重要的是最后一项")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("blockquote",[a("p",[t._v("Please enter the executor: ssh, docker+machine, docker-ssh+machine, kubernetes, docker, parallels, virtualbox, docker-ssh, shell:\ndocker")])])]),t._v(" "),a("p",[t._v("这个是选择 runner 的执行器，我选择了 docker，他会关联一个镜像，在 runner 执行的时候，他会先拉取关联的镜像进行 job 执行。")]),t._v(" "),a("h4",{attrs:{id:"_4-网页端"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-网页端"}},[t._v("#")]),t._v(" 4.网页端")]),t._v(" "),a("p",[t._v("这个时候我们就拿看到 runner 注册成功了，并且能在网页看到：\n"),a("img",{attrs:{src:t.$withBase("/assets/20220513/01.png"),alt:""}})]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",[t._v("runner 可以注册多个，只要继续执行 gitlab-runner register 即可！！！")])]),t._v(" "),a("h3",{attrs:{id:"关于-gitlab-runner-的环境"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#关于-gitlab-runner-的环境"}},[t._v("#")]),t._v(" 关于 gitlab-runner 的环境")]),t._v(" "),a("p",[t._v("gitlab-runner，他是 docker 构建的，所以，他存在于 docker 里，我们可以 docker ps 查看到，所以说，我们在跑 yml 文件的时候，此时的环境目录就是 docker 容器内，这是一个很重要的知识点，之前一直不能 cd 到外层目录，就是因为这个踩了这个坑，自己对于 docker 的概念不熟，现在慢慢的对于他，有所了解了。")]),t._v(" "),a("h3",{attrs:{id:"配置-ssh-免密登录远程服务器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#配置-ssh-免密登录远程服务器"}},[t._v("#")]),t._v(" 配置 ssh 免密登录远程服务器")]),t._v(" "),a("p",[t._v("gitlab-runner 我们安装并注册成功了，接下来，我们需要在 gitlab 服务器远程我们的部署服务器，所以需要先生成 ssh 密钥，把公钥添加进远程服务器，我们连接的时候，带上私钥去连接，这样我们就不要输密码了。")]),t._v(" "),a("h4",{attrs:{id:"_1-生成密钥对"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-生成密钥对"}},[t._v("#")]),t._v(" 1.生成密钥对")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",[t._v("ssh-keygen -t rsa # rsa 是加密算法，还可以选择 dsa 等算法")])]),t._v(" "),a("h4",{attrs:{id:"_2-将-id-rsa-pub-放入服务器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-将-id-rsa-pub-放入服务器"}},[t._v("#")]),t._v(" 2.将 id_rsa.pub 放入服务器")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",[t._v("ssh-copy-id "),a("username",[t._v("@"),a("host",[t._v(" # 这会追加公钥在远程服务器的~/.ssh/authorized_keys 文件中")])],1)],1)]),t._v(" "),a("p",[t._v("用这条命令是最合适的，不要用 scp ~.ssh\\id_rsa.pub username@host:.ssh\\这条命令，这可能会有问题，对于 authorized_keys 文件。\n然后我们 ssh 远程连接服务器，就会发现不需要打密码了。")]),t._v(" "),a("h3",{attrs:{id:"ssh-踩坑记录"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ssh-踩坑记录"}},[t._v("#")]),t._v(" ssh 踩坑记录")]),t._v(" "),a("p",[t._v("安装准备都可以了。这里面踩的坑属实是 ssh 这一流程，花了我 2 天时间，无论我怎么做，他都是 failed，看着几百条 failed 的 pipeline，心里交瘁，使用了 shell 执行器，在 gitlab-runner，add ssh-keys，runner 跑的时候，一直没有密钥，无论在外层，还是 docker 内，ssh-keys 都加了个遍，但无论怎么做，他在 runner 跑的时候，私钥就是不存在/.ssh 文件夹下，很奇怪，然后搜了很多资料，发现官方给我们推荐的说法是，ssh 连接，需要在 gitlab 网页使用变量存储私钥，然后在 runner 跑的时候，使用变量读取。")]),t._v(" "),a("h4",{attrs:{id:"_1-添加私钥到-gitlab-网页"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-添加私钥到-gitlab-网页"}},[t._v("#")]),t._v(" 1.添加私钥到 gitlab 网页")]),t._v(" "),a("img",{attrs:{src:t.$withBase("/assets/20220513/02.png"),alt:""}}),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",[t._v("将在服务器生成的私钥复制到这里")])]),t._v(" "),a("h4",{attrs:{id:"_2-yml-文件编写读取-ssh-私钥"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-yml-文件编写读取-ssh-私钥"}},[t._v("#")]),t._v(" 2. yml 文件编写读取 ssh 私钥")]),t._v(" "),a("div",{staticClass:"language-yml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-yml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("before_script")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Install ssh-agent if not already installed, it is required by Docker.")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## (change apt-get to yum if you use an RPM-based image)")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"which ssh-agent || (yum update -y && yum install openssh-client git -y)"')]),t._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Run ssh-agent (inside the build environment)")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" eval $(ssh"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("agent "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("s)\n\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Add the SSH key stored in SSH_PRIVATE_KEY variable to the agent store")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## We're using tr to fix line endings which makes ed25519 keys work")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## without extra base64 encoding.")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## https://gitlab.com/gitlab-examples/ssh-private-key/issues/1#note_48526556")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(' echo "$SSH_PRIVATE_KEY" '),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("|")]),t._v(" tr "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("d '\\r' "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("|")]),t._v(" ssh"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("add "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Create the SSH directory and give it the right permissions")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" mkdir "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("p ~/.ssh\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" chmod 700 ~/.ssh\n\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" ssh"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("keyscan gitlab.com "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")]),t._v(" ~/.ssh/known_hosts\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" chmod 644 ~/.ssh/known_hosts\n")])])]),a("p",[t._v("这样我们就完成了。")]),t._v(" "),a("h3",{attrs:{id:"yml-文件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#yml-文件"}},[t._v("#")]),t._v(" yml 文件")]),t._v(" "),a("p",[t._v("最后的最后，贴一下自己的 yml")]),t._v(" "),a("div",{staticClass:"language-yml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-yml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 缓存")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("cache")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("paths")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# node 下载的依赖")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" node_modules\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 打包结果")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" dist\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# pipeline 阶段")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("stages")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 构建")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" build\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 部署")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" deploy\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# build 阶段的工作")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("build-job")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("only")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" master\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("stage")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" build\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("tags")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" build\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("script")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" npm "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("v\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" node "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("v\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(' echo "🚚 开始安装依赖"\n    '),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" npm install\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(' echo "😄 安装依赖成功"\n    '),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(' echo "🚚 开始打包"\n    '),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" npm run build\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(' echo "😄 打包成功"\n\n'),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# deploy 阶段的工作")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("deploy-job")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("only")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" master\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("stage")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" deploy\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("tags")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" build\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("before_script")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Install ssh-agent if not already installed, it is required by Docker.")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## (change apt-get to yum if you use an RPM-based image)")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"which ssh-agent || (yum update -y && yum install openssh-client git -y)"')]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Run ssh-agent (inside the build environment)")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" eval $(ssh"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("agent "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("s)\n\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Add the SSH key stored in SSH_PRIVATE_KEY variable to the agent store")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## We're using tr to fix line endings which makes ed25519 keys work")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## without extra base64 encoding.")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## https://gitlab.com/gitlab-examples/ssh-private-key/issues/1#note_48526556")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(' echo "$SSH_PRIVATE_KEY" '),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("|")]),t._v(" tr "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("d '\\r' "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("|")]),t._v(" ssh"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("add "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Create the SSH directory and give it the right permissions")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" mkdir "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("p ~/.ssh\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" chmod 700 ~/.ssh\n\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" ssh"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("keyscan <host"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")]),t._v(" ~/.ssh/known_hosts\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" chmod 644 ~/.ssh/known_hosts\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("script")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(' echo "🚚 开始发送包"\n    '),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" ssh root@<host"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")]),t._v(' "cd /usr/local/nginx/html/command/ '),a("span",{pre:!0,attrs:{class:"token important"}},[t._v("&&")]),t._v(" rm "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v('rf dist"\n    '),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" scp "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("r dist root@<host"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("/usr/local/nginx/html/command/\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(' echo "😄 部署完成"\n')])])])])}),[],!1,null,null,null);s.default=e.exports}}]);